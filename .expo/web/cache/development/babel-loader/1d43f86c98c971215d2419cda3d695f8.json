{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/GamePlayScreen.js\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from \"react-redux\";\nimport CardsContainer from \"../components/CardsContainer\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport SpeechBubble from \"../components/SpeechBubble\";\nimport StreakTracker from \"../components/StreakTracker\";\nimport { characters, decks, levels } from \"../test_data\";\n\nfunction GamePlayScreen(_ref) {\n  var gameState = _ref.gameState,\n      navigation = _ref.navigation;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      streak = _useState2[0],\n      setStreak = _useState2[1];\n\n  var level = 2;\n  var language = \"french\";\n  var deck = \"numbers_1\";\n  var cardText = decks[deck].deck[0].languages[language];\n  console.log(\"card: \", card);\n  var pre = levels[level].languages[language].pre;\n  var post = levels[level].languages[language].post;\n\n  var handleStreakChange = function handleStreakChange() {\n    if (streak >= 12) return;\n\n    if (card) {\n      setStreak(streak + 1);\n    } else {\n      setStreak(0);\n    }\n  };\n\n  if (streak === 12) {\n    setTimeout(function () {\n      setStreak(0);\n      navigation.navigate(\"GameOver\");\n    }, 2000);\n  }\n\n  if (!characters || !decks || !levels) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 4\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }, \"Loading...\"));\n  }\n\n  return React.createElement(Screen, {\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }\n  }, React.createElement(ScreenHeader, {\n    navLeft: function navLeft() {\n      return navigation.navigate(\"Options\");\n    },\n    navLeftIcon: require(\"../assets/buttons/options_icon_light.png\"),\n    navRight: function navRight() {\n      return navigation.navigate(\"Help\");\n    },\n    navRightIcon: require(\"../assets/buttons/help_icon_light.png\"),\n    showTitle: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }\n  }), React.createElement(StreakTracker, {\n    streak: streak,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }\n  }), React.createElement(CardsContainer, {\n    onPress: handleStreakChange,\n    deck: decks.food_1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }\n  }), React.createElement(SpeechBubble, {\n    character: characters[1],\n    text: \"\" + pre + cardText + post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    gameState: state.matchAndMemory\n  };\n};\n\nexport default connect(mapStateToProps)(GamePlayScreen);","map":{"version":3,"sources":["/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/GamePlayScreen.js"],"names":["React","useEffect","useState","connect","CardsContainer","Screen","ScreenHeader","SpeechBubble","StreakTracker","characters","decks","levels","GamePlayScreen","gameState","navigation","streak","setStreak","level","language","deck","cardText","languages","console","log","card","pre","post","handleStreakChange","setTimeout","navigate","styles","screen","require","food_1","StyleSheet","create","mapStateToProps","state","matchAndMemory"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// components\nimport CardsContainer from \"../components/CardsContainer\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport SpeechBubble from \"../components/SpeechBubble\";\nimport StreakTracker from \"../components/StreakTracker\";\n\n// TODO: get this from the server/dynamically\nimport { characters, decks, levels } from \"../test_data\";\n\nfunction GamePlayScreen({ gameState, navigation }) {\n\tconst [streak, setStreak] = useState(0);\n\n\tconst level = 2;\n\tconst language = \"french\";\n\tconst deck = \"numbers_1\";\n\n\t// useEffect(() => {}, []);\n\n\t// TODO: get questions from the store dynamically\n\t// TODO:  'streak' may need to be part of the redux store\n\n\tconst cardText = decks[deck].deck[0].languages[language];\n\tconsole.log(\"card: \", card);\n\tconst pre = levels[level].languages[language].pre;\n\tconst post = levels[level].languages[language].post;\n\n\t// for testing purposes, 2 and 3 lines of text\n\t// const post = \", please do it. I like\";\n\t// const post = \", please do it. I like that. asdf arg aw ase aesa asdv awe \";\n\n\tconst handleStreakChange = () => {\n\t\tif (streak >= 12) return;\n\t\t// TODO:fix the if condition\n\t\tif (card) {\n\t\t\t// 1.  increase only if card choice matches bubble text\n\t\t\tsetStreak(streak + 1);\n\t\t} else {\n\t\t\t// 2. reset streak if card choice doesn't match bubble text\n\t\t\tsetStreak(0);\n\t\t}\n\t};\n\n\t// game over condition\n\t// TODO: disable all buttons while waiting for transition\n\tif (streak === 12) {\n\t\tsetTimeout(() => {\n\t\t\tsetStreak(0);\n\t\t\tnavigation.navigate(\"GameOver\");\n\t\t}, 2000);\n\t}\n\n\t// TODO: need a better loading mechanism\n\tif (!characters || !decks || !levels) {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text>Loading...</Text>\n\t\t\t</View>\n\t\t);\n\t}\n\treturn (\n\t\t<Screen style={styles.screen}>\n\t\t\t<ScreenHeader\n\t\t\t\tnavLeft={() => navigation.navigate(\"Options\")}\n\t\t\t\tnavLeftIcon={require(\"../assets/buttons/options_icon_light.png\")}\n\t\t\t\tnavRight={() => navigation.navigate(\"Help\")}\n\t\t\t\tnavRightIcon={require(\"../assets/buttons/help_icon_light.png\")}\n\t\t\t\tshowTitle={false}\n\t\t\t/>\n\n\t\t\t<StreakTracker streak={streak} />\n\n\t\t\t<CardsContainer onPress={handleStreakChange} deck={decks.food_1} />\n\n\t\t\t<SpeechBubble\n\t\t\t\tcharacter={characters[1]}\n\t\t\t\ttext={`${pre}${cardText}${post}`}\n\t\t\t/>\n\t\t</Screen>\n\t);\n}\n\nconst styles = StyleSheet.create({});\n\nconst mapStateToProps = state => ({\n\tgameState: state.matchAndMemory,\n});\n\nexport default connect(mapStateToProps)(GamePlayScreen);\n"]},"metadata":{},"sourceType":"module"}