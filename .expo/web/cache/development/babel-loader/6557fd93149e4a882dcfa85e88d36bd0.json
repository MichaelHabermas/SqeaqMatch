{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/GamePlayScreen.js\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from \"react-redux\";\nimport CardsContainer from \"../components/CardsContainer\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport SpeechBubble from \"../components/SpeechBubble\";\nimport StreakTracker from \"../components/StreakTracker\";\nimport { characters, decks, levels } from \"../test_data\";\nvar initialGameSettings = {\n  level: 3,\n  language: \"italian\",\n  deck: \"numbers_2\"\n};\n\nfunction GamePlayScreen(_ref) {\n  var gameState = _ref.gameState,\n      navigation = _ref.navigation;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      streak = _useState2[0],\n      setStreak = _useState2[1];\n\n  var _useState3 = useState(initialGameSettings),\n      _useState4 = _slicedToArray(_useState3, 2),\n      gameSettings = _useState4[0],\n      setGameSettings = _useState4[1];\n\n  var cardText = decks[gameSettings.deck].deck[0].languages[gameSettings.language];\n  console.log(\"cardText: \", cardText);\n  var pre = levels[gameSettings.level].languages[gameSettings.language].pre;\n  var post = levels[gameSettings.level].languages[gameSettings.language].post;\n\n  var handleStreakChange = function handleStreakChange() {\n    if (streak >= 12) return;\n\n    if (cardText) {\n      setStreak(streak + 1);\n    } else {\n      setStreak(0);\n    }\n  };\n\n  if (streak === 12) {\n    setTimeout(function () {\n      setStreak(0);\n      navigation.navigate(\"GameOver\");\n    }, 2000);\n  }\n\n  if (!characters || !decks || !levels) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 4\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }\n    }, \"Loading...\"));\n  }\n\n  return React.createElement(Screen, {\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }\n  }, React.createElement(ScreenHeader, {\n    navLeft: function navLeft() {\n      return navigation.navigate(\"Options\");\n    },\n    navLeftIcon: require(\"../assets/buttons/options_icon_light.png\"),\n    navRight: function navRight() {\n      return navigation.navigate(\"Help\");\n    },\n    navRightIcon: require(\"../assets/buttons/help_icon_light.png\"),\n    showTitle: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }\n  }), React.createElement(StreakTracker, {\n    streak: streak,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }\n  }), React.createElement(CardsContainer, {\n    onPress: handleStreakChange,\n    deck: decks[gameSettings.deck].deck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }\n  }), React.createElement(SpeechBubble, {\n    character: characters[1],\n    text: \"\" + pre + cardText + post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    gameState: state.matchAndMemory\n  };\n};\n\nexport default connect(mapStateToProps)(GamePlayScreen);","map":{"version":3,"sources":["/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/GamePlayScreen.js"],"names":["React","useEffect","useState","connect","CardsContainer","Screen","ScreenHeader","SpeechBubble","StreakTracker","characters","decks","levels","initialGameSettings","level","language","deck","GamePlayScreen","gameState","navigation","streak","setStreak","gameSettings","setGameSettings","cardText","languages","console","log","pre","post","handleStreakChange","setTimeout","navigate","styles","screen","require","StyleSheet","create","mapStateToProps","state","matchAndMemory"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// components\nimport CardsContainer from \"../components/CardsContainer\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport SpeechBubble from \"../components/SpeechBubble\";\nimport StreakTracker from \"../components/StreakTracker\";\n\n// TODO: get this from the server/dynamically\nimport { characters, decks, levels } from \"../test_data\";\n\nconst initialGameSettings = {\n\tlevel: 3,\n\tlanguage: \"italian\",\n\tdeck: \"numbers_2\",\n};\n\nfunction GamePlayScreen({ gameState, navigation }) {\n\tconst [streak, setStreak] = useState(0);\n\tconst [gameSettings, setGameSettings] = useState(initialGameSettings);\n\n\t// const level = 3;\n\t// const language = \"italian\";\n\t// const deck = \"numbers_2\";\n\n\t// useEffect(() => {}, []);\n\n\t// TODO: get questions from the store dynamically\n\t// TODO:  'streak' may need to be part of the redux store\n\n\tconst cardText =\n\t\tdecks[gameSettings.deck].deck[0].languages[gameSettings.language];\n\tconsole.log(\"cardText: \", cardText);\n\tconst pre = levels[gameSettings.level].languages[gameSettings.language].pre;\n\tconst post = levels[gameSettings.level].languages[gameSettings.language].post;\n\n\t// for testing purposes, 2 and 3 lines of text\n\t// const post = \", please do it. I like\";\n\t// const post = \", please do it. I like that. asdf arg aw ase aesa asdv awe \";\n\n\tconst handleStreakChange = () => {\n\t\tif (streak >= 12) return;\n\t\t// TODO:fix the if condition\n\t\tif (cardText) {\n\t\t\t// 1.  increase only if card choice matches bubble text\n\t\t\tsetStreak(streak + 1);\n\t\t} else {\n\t\t\t// 2. reset streak if card choice doesn't match bubble text\n\t\t\tsetStreak(0);\n\t\t}\n\t};\n\n\t// game over condition\n\t// TODO: disable all buttons while waiting for transition\n\tif (streak === 12) {\n\t\tsetTimeout(() => {\n\t\t\tsetStreak(0);\n\t\t\tnavigation.navigate(\"GameOver\");\n\t\t}, 2000);\n\t}\n\n\t// TODO: need a better loading mechanism\n\tif (!characters || !decks || !levels) {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text>Loading...</Text>\n\t\t\t</View>\n\t\t);\n\t}\n\treturn (\n\t\t<Screen style={styles.screen}>\n\t\t\t<ScreenHeader\n\t\t\t\tnavLeft={() => navigation.navigate(\"Options\")}\n\t\t\t\tnavLeftIcon={require(\"../assets/buttons/options_icon_light.png\")}\n\t\t\t\tnavRight={() => navigation.navigate(\"Help\")}\n\t\t\t\tnavRightIcon={require(\"../assets/buttons/help_icon_light.png\")}\n\t\t\t\tshowTitle={false}\n\t\t\t/>\n\n\t\t\t<StreakTracker streak={streak} />\n\n\t\t\t<CardsContainer\n\t\t\t\tonPress={handleStreakChange}\n\t\t\t\tdeck={decks[gameSettings.deck].deck}\n\t\t\t/>\n\n\t\t\t<SpeechBubble\n\t\t\t\tcharacter={characters[1]}\n\t\t\t\ttext={`${pre}${cardText}${post}`}\n\t\t\t/>\n\t\t</Screen>\n\t);\n}\n\nconst styles = StyleSheet.create({});\n\nconst mapStateToProps = state => ({\n\tgameState: state.matchAndMemory,\n});\n\nexport default connect(mapStateToProps)(GamePlayScreen);\n"]},"metadata":{},"sourceType":"module"}