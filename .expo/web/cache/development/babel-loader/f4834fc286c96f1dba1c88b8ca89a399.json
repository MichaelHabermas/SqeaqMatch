{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/GamePlayScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from \"react-redux\";\nimport CardsContainer from \"../components/CardsContainer\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport SpeechBubble from \"../components/SpeechBubble\";\nimport StreakTracker from \"../components/StreakTracker\";\nimport { deckShuffle } from \"../gameLogic\";\nimport { characters, decks, levels } from \"../test_data\";\n\nfunction GamePlayScreen(_ref) {\n  var currentDeckName = _ref.currentDeckName,\n      currentLevel = _ref.currentLevel,\n      languageToLearn = _ref.languageToLearn,\n      navigation = _ref.navigation;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      streak = _useState2[0],\n      setStreak = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentDeck = _useState4[0],\n      setCurrentDeck = _useState4[1];\n\n  var _useState5 = useState({\n    cardText: \"\",\n    unchosen: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    currentCardIdx: Math.floor(Math.random() * 12)\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentCardText = _useState6[0],\n      setCurrentCardText = _useState6[1];\n\n  useEffect(function () {\n    resetStreak();\n  }, []);\n  var preText = levels[currentLevel].languages[languageToLearn].pre;\n  var postText = levels[currentLevel].languages[languageToLearn].post;\n\n  var cardIdxRandomizer = function cardIdxRandomizer() {\n    return Math.floor(Math.random() * currentCardText.unchosen.length);\n  };\n\n  var resetStreak = function resetStreak() {\n    var randomCardIdx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11][cardIdxRandomizer()];\n    setCurrentCardText({\n      cardText: decks[currentDeckName].deck[randomCardIdx].languages[languageToLearn],\n      unchosen: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].filter(function (num) {\n        return num != randomCardIdx;\n      })\n    });\n    setCurrentDeck(deckShuffle(decks[currentDeckName].deck));\n    setStreak(0);\n  };\n\n  var handleCardTap = function handleCardTap(cardText) {\n    if (streak >= 12) return;\n\n    if (cardText === currentCardText.cardText) {\n      if (streak >= 11) {\n        setTimeout(function () {\n          navigation.navigate(\"GameOver\");\n          resetStreak();\n        }, 1000);\n      } else {\n        var randomCardIdx = currentCardText.unchosen[cardIdxRandomizer()];\n        setCurrentCardText(_objectSpread(_objectSpread({}, currentCardText), {}, {\n          cardText: decks[currentDeckName].deck[randomCardIdx].languages[languageToLearn],\n          unchosen: currentCardText.unchosen.filter(function (num) {\n            return num != randomCardIdx;\n          })\n        }));\n        setStreak(streak + 1);\n      }\n    } else {\n      resetStreak();\n    }\n  };\n\n  if (!characters || !decks || !levels) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 4\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }\n    }, \"Loading...\"));\n  }\n\n  return React.createElement(Screen, {\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 3\n    }\n  }, React.createElement(ScreenHeader, {\n    navLeft: function navLeft() {\n      return navigation.navigate(\"Options\");\n    },\n    navLeftIcon: require(\"../assets/buttons/options_icon_light.png\"),\n    navRight: function navRight() {\n      return navigation.navigate(\"Help\");\n    },\n    navRightIcon: require(\"../assets/buttons/help_icon_light.png\"),\n    showTitle: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }\n  }), React.createElement(StreakTracker, {\n    streak: streak,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }\n  }), React.createElement(CardsContainer, {\n    handleCardTap: handleCardTap,\n    deck: currentDeck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }\n  }), React.createElement(SpeechBubble, {\n    character: characters[1],\n    text: \"\" + preText + currentCardText.cardText + postText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 4\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentDeckName: state.matchAndMemory.gameSettings.currentDeckName,\n    currentLevel: state.matchAndMemory.gameSettings.currentLevel,\n    languageToLearn: state.matchAndMemory.gameSettings.languageToLearn\n  };\n};\n\nexport default connect(mapStateToProps)(GamePlayScreen);","map":{"version":3,"sources":["/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/GamePlayScreen.js"],"names":["React","useEffect","useState","connect","CardsContainer","Screen","ScreenHeader","SpeechBubble","StreakTracker","deckShuffle","characters","decks","levels","GamePlayScreen","currentDeckName","currentLevel","languageToLearn","navigation","streak","setStreak","currentDeck","setCurrentDeck","cardText","unchosen","currentCardIdx","Math","floor","random","currentCardText","setCurrentCardText","resetStreak","preText","languages","pre","postText","post","cardIdxRandomizer","length","randomCardIdx","deck","filter","num","handleCardTap","setTimeout","navigate","styles","screen","require","StyleSheet","create","mapStateToProps","state","matchAndMemory","gameSettings"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// components\nimport CardsContainer from \"../components/CardsContainer\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport SpeechBubble from \"../components/SpeechBubble\";\nimport StreakTracker from \"../components/StreakTracker\";\n\n// logic\nimport { deckShuffle } from \"../gameLogic\";\n\n// TODO: get this from the server/dynamically\nimport { characters, decks, levels } from \"../test_data\";\n\nfunction GamePlayScreen({\n\tcurrentDeckName,\n\tcurrentLevel,\n\tlanguageToLearn,\n\tnavigation,\n}) {\n\tconst [streak, setStreak] = useState(0);\n\tconst [currentDeck, setCurrentDeck] = useState();\n\tconst [currentCardText, setCurrentCardText] = useState({\n\t\tcardText: \"\",\n\t\tunchosen: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n\t\tcurrentCardIdx: Math.floor(Math.random() * 12),\n\t});\n\n\tuseEffect(() => {\n\t\tresetStreak();\n\t}, []);\n\n\tconst preText = levels[currentLevel].languages[languageToLearn].pre;\n\tconst postText = levels[currentLevel].languages[languageToLearn].post;\n\n\tconst cardIdxRandomizer = () =>\n\t\tMath.floor(Math.random() * currentCardText.unchosen.length);\n\n\tconst resetStreak = () => {\n\t\tconst randomCardIdx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11][\n\t\t\tcardIdxRandomizer()\n\t\t];\n\t\tsetCurrentCardText({\n\t\t\tcardText:\n\t\t\t\tdecks[currentDeckName].deck[randomCardIdx].languages[languageToLearn],\n\t\t\tunchosen: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].filter(\n\t\t\t\tnum => num != randomCardIdx\n\t\t\t),\n\t\t});\n\t\tsetCurrentDeck(deckShuffle(decks[currentDeckName].deck));\n\t\tsetStreak(0);\n\t};\n\n\tconst handleCardTap = cardText => {\n\t\t// prevent over-selecting cards on game over\n\t\tif (streak >= 12) return;\n\t\tif (cardText === currentCardText.cardText) {\n\t\t\t// game over condition\n\t\t\tif (streak >= 11) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tnavigation.navigate(\"GameOver\");\n\t\t\t\t\tresetStreak();\n\t\t\t\t}, 1000);\n\t\t\t} else {\n\t\t\t\tconst randomCardIdx = currentCardText.unchosen[cardIdxRandomizer()];\n\t\t\t\tsetCurrentCardText({\n\t\t\t\t\t...currentCardText,\n\t\t\t\t\tcardText:\n\t\t\t\t\t\tdecks[currentDeckName].deck[randomCardIdx].languages[\n\t\t\t\t\t\t\tlanguageToLearn\n\t\t\t\t\t\t],\n\t\t\t\t\tunchosen: currentCardText.unchosen.filter(\n\t\t\t\t\t\tnum => num != randomCardIdx\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t\tsetStreak(streak + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tresetStreak();\n\t\t}\n\t};\n\n\t// TODO: need a better loading mechanism\n\tif (!characters || !decks || !levels) {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text>Loading...</Text>\n\t\t\t</View>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Screen style={styles.screen}>\n\t\t\t<ScreenHeader\n\t\t\t\tnavLeft={() => navigation.navigate(\"Options\")}\n\t\t\t\tnavLeftIcon={require(\"../assets/buttons/options_icon_light.png\")}\n\t\t\t\tnavRight={() => navigation.navigate(\"Help\")}\n\t\t\t\tnavRightIcon={require(\"../assets/buttons/help_icon_light.png\")}\n\t\t\t\tshowTitle={false}\n\t\t\t/>\n\n\t\t\t<StreakTracker streak={streak} />\n\n\t\t\t<CardsContainer\n\t\t\t\thandleCardTap={handleCardTap}\n\t\t\t\tdeck={currentDeck}\n\t\t\t\t// deck={decks[currentDeckName].deck}\n\t\t\t/>\n\n\t\t\t<SpeechBubble\n\t\t\t\tcharacter={characters[1]}\n\t\t\t\ttext={`${preText}${currentCardText.cardText}${postText}`}\n\t\t\t/>\n\t\t</Screen>\n\t);\n}\n\nconst styles = StyleSheet.create({});\n\nconst mapStateToProps = state => ({\n\tcurrentDeckName: state.matchAndMemory.gameSettings.currentDeckName,\n\tcurrentLevel: state.matchAndMemory.gameSettings.currentLevel,\n\tlanguageToLearn: state.matchAndMemory.gameSettings.languageToLearn,\n});\n\nexport default connect(mapStateToProps)(GamePlayScreen);\n"]},"metadata":{},"sourceType":"module"}