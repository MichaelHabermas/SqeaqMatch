{"ast":null,"code":"var _jsxFileName = \"/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/components/VertScrollSelector.js\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { connect } from \"react-redux\";\nimport Text from \"../components/Text\";\nimport defaultStyles from \"../config/styles\";\nvar CARD_WIDTH = 190;\nvar SPACING_FOR_CARD_INSET = 0;\n\nfunction VertScrollSelector(_ref) {\n  var _this = this;\n\n  var gameState = _ref.gameState,\n      scrollOptions = _ref.scrollOptions,\n      style = _ref.style;\n  return React.createElement(View, {\n    style: [styles.container, style],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 3\n    }\n  }, React.createElement(ScrollView, {\n    horizontal: true,\n    vertical: false,\n    pagingEnabled: true,\n    decelerationRate: \"fast\",\n    snapToInterval: CARD_WIDTH + 10,\n    snapToAlignment: \"center\",\n    contentInset: {\n      top: 0,\n      left: SPACING_FOR_CARD_INSET,\n      bottom: 0,\n      right: SPACING_FOR_CARD_INSET\n    },\n    contentContainerStyle: {\n      paddingHorizontal: Platform.OS === \"android\" ? SPACING_FOR_CARD_INSET : 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 4\n    }\n  }, scrollOptions.map(function (option, index) {\n    return React.createElement(View, {\n      key: index,\n      style: styles.option,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.optionText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 8\n      }\n    }, option));\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: defaultStyles.colors.white,\n    borderRadius: 50,\n    height: 60,\n    justifyContent: \"center\",\n    width: 160\n  },\n  option: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: CARD_WIDTH,\n    backgroundColor: \"transparent\",\n    margin: 5,\n    borderRadius: 15\n  },\n  optionText: {\n    color: defaultStyles.colors.medium,\n    alignSelf: \"center\",\n    fontSize: 30,\n    textShadowColor: \"rgba(0, 0, 0, 0.0)\",\n    textShadowOffset: {\n      height: 0,\n      width: 0\n    },\n    textShadowRadius: 0\n  },\n  scrollPadding: {\n    paddingHorizontal: 20\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    gameState: state.matchAndMemory\n  };\n};\n\nexport default connect(mapStateToProps)(VertScrollSelector);","map":{"version":3,"sources":["/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/components/VertScrollSelector.js"],"names":["React","connect","Text","defaultStyles","CARD_WIDTH","SPACING_FOR_CARD_INSET","VertScrollSelector","gameState","scrollOptions","style","styles","container","top","left","bottom","right","paddingHorizontal","Platform","OS","map","option","index","optionText","StyleSheet","create","alignItems","backgroundColor","colors","white","borderRadius","height","justifyContent","width","margin","color","medium","alignSelf","fontSize","textShadowColor","textShadowOffset","textShadowRadius","scrollPadding","mapStateToProps","state","matchAndMemory"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, StyleSheet, ScrollView } from \"react-native\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// components\nimport Text from \"../components/Text\";\n\n// styling\nimport defaultStyles from \"../config/styles\";\n\n// temp variables\nconst CARD_WIDTH = 190;\nconst SPACING_FOR_CARD_INSET = 0;\n\nfunction VertScrollSelector({ gameState, scrollOptions, style }) {\n\treturn (\n\t\t<View style={[styles.container, style]}>\n\t\t\t<ScrollView\n\t\t\t\thorizontal // Change the direction to horizontal\n\t\t\t\tvertical={false}\n\t\t\t\tpagingEnabled // Enable paging\n\t\t\t\tdecelerationRate=\"fast\" // Disable deceleration\n\t\t\t\tsnapToInterval={CARD_WIDTH + 10} // Calculate the size for a card including marginLeft and marginRight\n\t\t\t\tsnapToAlignment=\"center\" // Snap to the center\n\t\t\t\tcontentInset={{\n\t\t\t\t\t// iOS ONLY\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: SPACING_FOR_CARD_INSET, // Left spacing for the very first card\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\tright: SPACING_FOR_CARD_INSET, // Right spacing for the very last card\n\t\t\t\t}}\n\t\t\t\tcontentContainerStyle={{\n\t\t\t\t\t// contentInset alternative for Android\n\t\t\t\t\tpaddingHorizontal:\n\t\t\t\t\t\tPlatform.OS === \"android\" ? SPACING_FOR_CARD_INSET : 0, // Horizontal spacing before and after the ScrollView\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{scrollOptions.map((option, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<View key={index} style={styles.option}>\n\t\t\t\t\t\t\t<Text style={styles.optionText}>{option}</Text>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ScrollView>\n\t\t</View>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\talignItems: \"center\",\n\t\tbackgroundColor: defaultStyles.colors.white,\n\t\tborderRadius: 50,\n\t\theight: 60,\n\t\tjustifyContent: \"center\",\n\t\twidth: 160,\n\t},\n\t// option: {  },\n\toption: {\n\t\talignItems: \"center\",\n\t\tjustifyContent: \"center\",\n\t\twidth: CARD_WIDTH,\n\t\tbackgroundColor: \"transparent\",\n\t\tmargin: 5,\n\t\tborderRadius: 15,\n\t},\n\toptionText: {\n\t\tcolor: defaultStyles.colors.medium,\n\t\talignSelf: \"center\",\n\n\t\tfontSize: 30,\n\t\ttextShadowColor: \"rgba(0, 0, 0, 0.0)\",\n\t\ttextShadowOffset: {\n\t\t\theight: 0,\n\t\t\twidth: 0,\n\t\t},\n\t\ttextShadowRadius: 0,\n\t},\n\tscrollPadding: {\n\t\tpaddingHorizontal: 20,\n\t},\n});\n\nconst mapStateToProps = state => ({\n\tgameState: state.matchAndMemory,\n});\n\nexport default connect(mapStateToProps)(VertScrollSelector);\n"]},"metadata":{},"sourceType":"module"}