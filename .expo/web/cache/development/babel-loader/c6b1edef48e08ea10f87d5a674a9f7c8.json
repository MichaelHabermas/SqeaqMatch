{"ast":null,"code":"var _jsxFileName = \"/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/components/VertScrollSelector.js\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { connect } from \"react-redux\";\nimport Text from \"../components/Text\";\nimport defaultStyles from \"../config/styles\";\nvar CARD_WIDTH = 190;\nvar SPACING_FOR_CARD_INSET = 60;\n\nfunction VertScrollSelector(_ref) {\n  var _this = this;\n\n  var gameState = _ref.gameState,\n      scrollOptions = _ref.scrollOptions,\n      setNewProfile = _ref.setNewProfile,\n      style = _ref.style;\n\n  var handleScroll = function handleScroll(event) {\n    var contentOffset = event.nativeEvent.contentOffset;\n    console.log(\"contentOffset: \", contentOffset);\n    var x = contentOffset.x,\n        y = contentOffset.y;\n    console.log(\"contentOffset: \", contentOffset);\n    var index = Math.round(y / CARD_WIDTH);\n    console.log(\"index: \", index);\n  };\n\n  return React.createElement(View, {\n    style: [styles.container, style],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 3\n    }\n  }, React.createElement(ScrollView, {\n    onScroll: handleScroll,\n    contentContainerStyle: {\n      paddingHorizontal: Platform.OS === \"android\" ? SPACING_FOR_CARD_INSET : 0\n    },\n    contentInset: {\n      top: 0,\n      left: SPACING_FOR_CARD_INSET,\n      bottom: 0,\n      right: SPACING_FOR_CARD_INSET\n    },\n    decelerationRate: \"fast\",\n    horizontal: true,\n    showsHorizontalScrollIndicator: false,\n    snapToAlignment: \"center\",\n    snapToInterval: CARD_WIDTH + 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }\n  }, scrollOptions.map(function (option, index) {\n    return React.createElement(View, {\n      key: index,\n      style: styles.option,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.optionText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 8\n      }\n    }, option));\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: defaultStyles.colors.white,\n    borderRadius: 50,\n    height: 60,\n    justifyContent: \"center\",\n    width: 100\n  },\n  option: {\n    alignItems: \"center\",\n    backgroundColor: \"transparent\",\n    justifyContent: \"center\",\n    marginHorizontal: 5,\n    width: CARD_WIDTH\n  },\n  optionText: {\n    color: defaultStyles.colors.light_blue,\n    fontSize: 30,\n    textShadowColor: \"rgba(0, 0, 0, 0.0)\",\n    textShadowOffset: {\n      height: 0,\n      width: 0\n    },\n    textShadowRadius: 0\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    gameState: state.matchAndMemory\n  };\n};\n\nexport default connect(mapStateToProps)(VertScrollSelector);","map":{"version":3,"sources":["/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/components/VertScrollSelector.js"],"names":["React","connect","Text","defaultStyles","CARD_WIDTH","SPACING_FOR_CARD_INSET","VertScrollSelector","gameState","scrollOptions","setNewProfile","style","handleScroll","event","contentOffset","nativeEvent","console","log","x","y","index","Math","round","styles","container","paddingHorizontal","Platform","OS","top","left","bottom","right","map","option","optionText","StyleSheet","create","backgroundColor","colors","white","borderRadius","height","justifyContent","width","alignItems","marginHorizontal","color","light_blue","fontSize","textShadowColor","textShadowOffset","textShadowRadius","mapStateToProps","state","matchAndMemory"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, StyleSheet, ScrollView } from \"react-native\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// components\nimport Text from \"../components/Text\";\n\n// styling\nimport defaultStyles from \"../config/styles\";\n\n// temp variables\nconst CARD_WIDTH = 190;\nconst SPACING_FOR_CARD_INSET = 60;\n\nfunction VertScrollSelector({\n\tgameState,\n\tscrollOptions,\n\tsetNewProfile,\n\tstyle,\n}) {\n\t// const { width } = Dimensions.get(\"window\");\n\t// this.IMAGE_WIDTH = width * (1 / 2.5);\n\t// this.image_margin = 5;\n\t// this.nishhar =\n\t// \twidth -\n\t// \t((this.IMAGE_WIDTH + this.image_margin) * 2 + this.image_margin * 2);\n\n\tconst handleScroll = event => {\n\t\tconst { contentOffset } = event.nativeEvent;\n\t\tconsole.log(\"contentOffset: \", contentOffset);\n\t\tconst { x, y } = contentOffset;\n\t\tconsole.log(\"contentOffset: \", contentOffset);\n\t\tconst index = Math.round(y / CARD_WIDTH);\n\t\tconsole.log(\"index: \", index);\n\t\t// setNewProfile(index);\n\t};\n\n\treturn (\n\t\t<View style={[styles.container, style]}>\n\t\t\t<ScrollView\n\t\t\t\tonScroll={handleScroll}\n\t\t\t\tcontentContainerStyle={{\n\t\t\t\t\t// contentInset alternative for Android\n\t\t\t\t\tpaddingHorizontal:\n\t\t\t\t\t\tPlatform.OS === \"android\" ? SPACING_FOR_CARD_INSET : 0, // Horizontal spacing before and after the ScrollView\n\t\t\t\t}}\n\t\t\t\tcontentInset={{\n\t\t\t\t\t// iOS ONLY\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: SPACING_FOR_CARD_INSET, // Left spacing for the very first card\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\tright: SPACING_FOR_CARD_INSET, // Right spacing for the very last card\n\t\t\t\t}}\n\t\t\t\tdecelerationRate=\"fast\"\n\t\t\t\thorizontal // Change the direction to horizontal\n\t\t\t\tshowsHorizontalScrollIndicator={false}\n\t\t\t\tsnapToAlignment=\"center\"\n\t\t\t\tsnapToInterval={CARD_WIDTH + 10} // Calculate the size for a card including marginLeft and marginRight\n\t\t\t\t// snapToOffsets={[...Array(scrollOptions.length)].map(\n\t\t\t\t// \t(x, i) =>\n\t\t\t\t// \t\ti * (this.IMAGE_WIDTH + 2 * this.image_margin) - this.nishhar * 0.5\n\t\t\t\t// )}\n\t\t\t>\n\t\t\t\t{scrollOptions.map((option, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<View key={index} style={styles.option}>\n\t\t\t\t\t\t\t<Text style={styles.optionText}>{option}</Text>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ScrollView>\n\t\t</View>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tbackgroundColor: defaultStyles.colors.white,\n\t\tborderRadius: 50,\n\t\theight: 60,\n\t\tjustifyContent: \"center\",\n\t\twidth: 100,\n\t},\n\toption: {\n\t\talignItems: \"center\",\n\t\tbackgroundColor: \"transparent\",\n\t\tjustifyContent: \"center\",\n\t\tmarginHorizontal: 5,\n\t\twidth: CARD_WIDTH,\n\t},\n\toptionText: {\n\t\tcolor: defaultStyles.colors.light_blue,\n\t\tfontSize: 30,\n\t\ttextShadowColor: \"rgba(0, 0, 0, 0.0)\",\n\t\ttextShadowOffset: {\n\t\t\theight: 0,\n\t\t\twidth: 0,\n\t\t},\n\t\ttextShadowRadius: 0,\n\t},\n});\n\nconst mapStateToProps = state => ({\n\tgameState: state.matchAndMemory,\n});\n\nexport default connect(mapStateToProps)(VertScrollSelector);\n"]},"metadata":{},"sourceType":"module"}