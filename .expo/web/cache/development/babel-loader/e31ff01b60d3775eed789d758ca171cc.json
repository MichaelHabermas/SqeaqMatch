{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/LevelSelectScreen.js\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from \"react-redux\";\nimport MenuButton from \"../components/MenuButton\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport LevelSelectionContainer from \"../components/LevelSelectionContainer\";\nimport DeckSelectionContainer from \"../components/DeckSelectionContainer\";\nimport defaultStyles from \"../config/styles\";\n\nfunction LevelSelectScreen(_ref) {\n  var navigation = _ref.navigation,\n      gameState = _ref.gameState;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      menuChoice = _useState2[0],\n      setMenuChoice = _useState2[1];\n\n  var handleGoBack = function handleGoBack() {\n    navigation.navigate(\"Start\");\n  };\n\n  return React.createElement(Screen, {\n    screen: true,\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 3\n    }\n  }, React.createElement(ScreenHeader, {\n    navLeft: handleGoBack,\n    navLeftIcon: require(\"../assets/buttons/back_icon_dark.png\"),\n    navRight: function navRight() {\n      return navigation.navigate(\"GamePlay\");\n    },\n    navRightIcon: require(\"../assets/buttons/forward_icon_dark.png\"),\n    title: \"Level Select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }\n  }), React.createElement(View, {\n    style: styles.selections,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }\n  }, React.createElement(MenuButton, {\n    chosen: menuChoice,\n    onPress: function onPress() {\n      return setMenuChoice(true);\n    },\n    style: styles.selectionItem,\n    title: \"Level\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }), React.createElement(MenuButton, {\n    chosen: !menuChoice,\n    onPress: function onPress() {\n      return setMenuChoice(false);\n    },\n    style: styles.selectionItem,\n    title: \"Deck\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  })), menuChoice && React.createElement(LevelSelectionContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }\n  }), !menuChoice && React.createElement(DeckSelectionContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 20\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  club: {\n    position: \"absolute\"\n  },\n  screen: {},\n  selections: {\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\"\n  },\n  selectionItem: {\n    color: defaultStyles.colors.white,\n    fontSize: 40\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    gameState: state.matchAndMemory\n  };\n};\n\nexport default connect(mapStateToProps)(LevelSelectScreen);","map":{"version":3,"sources":["/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/LevelSelectScreen.js"],"names":["React","useState","connect","MenuButton","Screen","ScreenHeader","LevelSelectionContainer","DeckSelectionContainer","defaultStyles","LevelSelectScreen","navigation","gameState","menuChoice","setMenuChoice","handleGoBack","navigate","styles","screen","require","selections","selectionItem","StyleSheet","create","club","position","alignItems","flexDirection","justifyContent","color","colors","white","fontSize","mapStateToProps","state","matchAndMemory"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAIA,SAASC,OAAT,QAAwB,aAAxB;AAGA,OAAOC,UAAP;AACA,OAAOC,MAAP;AACA,OAAOC,YAAP;AACA,OAAOC,uBAAP;AACA,OAAOC,sBAAP;AAGA,OAAOC,aAAP;;AAEA,SAASC,iBAAT,OAAsD;AAAA,MAAzBC,UAAyB,QAAzBA,UAAyB;AAAA,MAAbC,SAAa,QAAbA,SAAa;;AACrD,kBAAoCV,QAAQ,CAAC,IAAD,CAA5C;AAAA;AAAA,MAAOW,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC1BJ,IAAAA,UAAU,CAACK,QAAX,CAAoB,OAApB;AACA,GAFD;;AAIA,SACC,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAE,IAAhB;AAAsB,IAAA,KAAK,EAAEC,MAAM,CAACC,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,YAAD;AACC,IAAA,OAAO,EAAEH,YADV;AAEC,IAAA,WAAW,EAAEI,OAAO,wCAFrB;AAGC,IAAA,QAAQ,EAAE;AAAA,aAAMR,UAAU,CAACK,QAAX,CAAoB,UAApB,CAAN;AAAA,KAHX;AAIC,IAAA,YAAY,EAAEG,OAAO,2CAJtB;AAKC,IAAA,KAAK,EAAC,cALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAQC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,UAAD;AACC,IAAA,MAAM,EAAEP,UADT;AAEC,IAAA,OAAO,EAAE;AAAA,aAAMC,aAAa,CAAC,IAAD,CAAnB;AAAA,KAFV;AAGC,IAAA,KAAK,EAAEG,MAAM,CAACI,aAHf;AAIC,IAAA,KAAK,EAAC,OAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAOC,oBAAC,UAAD;AACC,IAAA,MAAM,EAAE,CAACR,UADV;AAEC,IAAA,OAAO,EAAE;AAAA,aAAMC,aAAa,CAAC,KAAD,CAAnB;AAAA,KAFV;AAGC,IAAA,KAAK,EAAEG,MAAM,CAACI,aAHf;AAIC,IAAA,KAAK,EAAC,MAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPD,CARD,EAsBER,UAAU,IAAI,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBhB,EAuBE,CAACA,UAAD,IAAe,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBjB,CADD;AA2BA;;AAED,IAAMI,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAChCC,EAAAA,IAAI,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GAD0B;AAIhCP,EAAAA,MAAM,EAAE,EAJwB;AAKhCE,EAAAA,UAAU,EAAE;AACXM,IAAAA,UAAU,EAAE,QADD;AAEXC,IAAAA,aAAa,EAAE,KAFJ;AAGXC,IAAAA,cAAc,EAAE;AAHL,GALoB;AAUhCP,EAAAA,aAAa,EAAE;AACdQ,IAAAA,KAAK,EAAEpB,aAAa,CAACqB,MAAd,CAAqBC,KADd;AAEdC,IAAAA,QAAQ,EAAE;AAFI;AAViB,CAAlB,CAAf;;AAgBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AACjCtB,IAAAA,SAAS,EAAEsB,KAAK,CAACC;AADgB,GAAL;AAAA,CAA7B;;AAQA,eAAehC,OAAO,CAAC8B,eAAD,CAAP,CAAyBvB,iBAAzB,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// components\nimport MenuButton from \"../components/MenuButton\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport LevelSelectionContainer from \"../components/LevelSelectionContainer\";\nimport DeckSelectionContainer from \"../components/DeckSelectionContainer\";\n\n// styles\nimport defaultStyles from \"../config/styles\";\n\nfunction LevelSelectScreen({ navigation, gameState }) {\n\tconst [menuChoice, setMenuChoice] = useState(true);\n\n\tconst handleGoBack = () => {\n\t\tnavigation.navigate(\"Start\");\n\t};\n\n\treturn (\n\t\t<Screen screen={true} style={styles.screen}>\n\t\t\t<ScreenHeader\n\t\t\t\tnavLeft={handleGoBack}\n\t\t\t\tnavLeftIcon={require(\"../assets/buttons/back_icon_dark.png\")}\n\t\t\t\tnavRight={() => navigation.navigate(\"GamePlay\")}\n\t\t\t\tnavRightIcon={require(\"../assets/buttons/forward_icon_dark.png\")}\n\t\t\t\ttitle=\"Level Select\"\n\t\t\t/>\n\t\t\t<View style={styles.selections}>\n\t\t\t\t<MenuButton\n\t\t\t\t\tchosen={menuChoice}\n\t\t\t\t\tonPress={() => setMenuChoice(true)}\n\t\t\t\t\tstyle={styles.selectionItem}\n\t\t\t\t\ttitle=\"Level\"\n\t\t\t\t/>\n\t\t\t\t<MenuButton\n\t\t\t\t\tchosen={!menuChoice}\n\t\t\t\t\tonPress={() => setMenuChoice(false)}\n\t\t\t\t\tstyle={styles.selectionItem}\n\t\t\t\t\ttitle=\"Deck\"\n\t\t\t\t/>\n\t\t\t</View>\n\t\t\t{menuChoice && <LevelSelectionContainer />}\n\t\t\t{!menuChoice && <DeckSelectionContainer />}\n\t\t</Screen>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tclub: {\n\t\tposition: \"absolute\",\n\t},\n\tscreen: {},\n\tselections: {\n\t\talignItems: \"center\",\n\t\tflexDirection: \"row\",\n\t\tjustifyContent: \"space-evenly\",\n\t},\n\tselectionItem: {\n\t\tcolor: defaultStyles.colors.white,\n\t\tfontSize: 40,\n\t},\n});\n\nconst mapStateToProps = state => ({\n\tgameState: state.matchAndMemory,\n});\n\n// const mapActionsToProps = {\n// \tdispatch,\n// };\n\nexport default connect(mapStateToProps)(LevelSelectScreen);\n"]},"metadata":{},"sourceType":"module"}