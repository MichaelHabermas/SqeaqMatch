{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/HelpScreen.js\";\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { connect } from \"react-redux\";\nimport HelpMenuItem from \"../components/HelpMenuItem\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport { decks } from \"../test_data\";\nvar language = \"french\";\nvar initialDeck = decks.food_1.deck.map(function (card) {\n  return {\n    id: card.id,\n    image: card.image,\n    name: card.languages[language]\n  };\n});\n\nfunction HelpScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      gameState = _ref.gameState;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      deck = _useState2[0],\n      setDeck = _useState2[1];\n\n  useEffect(function () {\n    var helpCards = decks[gameState.gameSettings.languageToLearn].deck.map(function (card) {\n      return {\n        id: card.id,\n        image: card.image,\n        name: card.languages[gameState.gameSettings.languageToLearn]\n      };\n    });\n    setDeck(helpCards);\n  }, []);\n  return React.createElement(Screen, {\n    screen: true,\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 3\n    }\n  }, React.createElement(ScreenHeader, {\n    navRight: function navRight() {\n      return navigation.goBack();\n    },\n    navRightIcon: require(\"../assets/buttons/cancel_icon_dark.png\"),\n    showLeftButton: false,\n    title: \"Help\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }\n  }), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }\n  }, React.createElement(ScrollView, {\n    showsVerticalScrollIndicator: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.subContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 6\n    }\n  }, deck.map(function (card, index) {\n    return React.createElement(HelpMenuItem, {\n      key: index,\n      onPress: function onPress() {\n        return console.log(\"Card \" + card.name + \" pressed\");\n      },\n      card: card,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 8\n      }\n    });\n  })))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: \"center\",\n    bottom: 0,\n    height: \"90%\",\n    marginBottom: Platform.OS === \"ios\" ? -35 : 0,\n    position: \"absolute\",\n    width: \"90%\"\n  },\n  subContainer: {\n    height: \"100%\",\n    width: \"100%\"\n  },\n  screen: {\n    width: \"100%\"\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    gameState: state.matchAndMemory\n  };\n};\n\nexport default connect(mapStateToProps)(HelpScreen);","map":{"version":3,"sources":["/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/HelpScreen.js"],"names":["React","useState","connect","HelpMenuItem","Screen","ScreenHeader","decks","language","initialDeck","food_1","deck","map","card","id","image","name","languages","HelpScreen","navigation","gameState","setDeck","useEffect","helpCards","gameSettings","languageToLearn","styles","screen","goBack","require","container","subContainer","index","console","log","StyleSheet","create","alignSelf","bottom","height","marginBottom","Platform","OS","position","width","mapStateToProps","state","matchAndMemory"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { ScrollView, StyleSheet, View, Platform } from \"react-native\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// components\nimport HelpMenuItem from \"../components/HelpMenuItem\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\n\n// temporary data structures\nimport { decks } from \"../test_data\";\nconst language = \"french\";\nconst initialDeck = decks.food_1.deck.map(card => {\n\treturn {\n\t\tid: card.id,\n\t\timage: card.image,\n\t\tname: card.languages[language],\n\t};\n});\n\nfunction HelpScreen({ navigation, gameState }) {\n\tconst [deck, setDeck] = useState([]);\n\t// const [deck, setDeck] = useState([\n\t// \tdecks[gameState.gameSettings.languageToLearn].deck.map(card => {\n\t// \t\treturn {\n\t// \t\t\tid: card.id,\n\t// \t\t\timage: card.image,\n\t// \t\t\tname: card.languages[gameState.gameSettings.languageToLearn],\n\t// \t\t};\n\t// \t}),\n\t// ]);\n\n\tuseEffect(() => {\n\t\tconst helpCards = decks[gameState.gameSettings.languageToLearn].deck.map(\n\t\t\tcard => {\n\t\t\t\treturn {\n\t\t\t\t\tid: card.id,\n\t\t\t\t\timage: card.image,\n\t\t\t\t\tname: card.languages[gameState.gameSettings.languageToLearn],\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t\tsetDeck(helpCards);\n\t}, []);\n\n\treturn (\n\t\t<Screen screen={true} style={styles.screen}>\n\t\t\t<ScreenHeader\n\t\t\t\tnavRight={() => navigation.goBack()}\n\t\t\t\tnavRightIcon={require(\"../assets/buttons/cancel_icon_dark.png\")}\n\t\t\t\tshowLeftButton={false}\n\t\t\t\ttitle=\"Help\"\n\t\t\t/>\n\n\t\t\t<View style={styles.container}>\n\t\t\t\t<ScrollView showsVerticalScrollIndicator={false}>\n\t\t\t\t\t<View style={styles.subContainer}>\n\t\t\t\t\t\t{deck.map((card, index) => (\n\t\t\t\t\t\t\t<HelpMenuItem\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tonPress={() => console.log(`Card ${card.name} pressed`)}\n\t\t\t\t\t\t\t\tcard={card}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t// TODO: add a divider between cards\n\t\t\t\t\t\t))}\n\t\t\t\t\t</View>\n\t\t\t\t</ScrollView>\n\t\t\t</View>\n\t\t</Screen>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\talignSelf: \"center\",\n\t\tbottom: 0,\n\t\theight: \"90%\",\n\t\tmarginBottom: Platform.OS === \"ios\" ? -35 : 0, // TODO: fix all these with Constants\n\t\tposition: \"absolute\",\n\t\twidth: \"90%\",\n\t},\n\tsubContainer: {\n\t\theight: \"100%\",\n\t\twidth: \"100%\",\n\t},\n\tscreen: {\n\t\twidth: \"100%\",\n\t},\n});\n\nconst mapStateToProps = state => ({\n\tgameState: state.matchAndMemory,\n});\n\nexport default connect(mapStateToProps)(HelpScreen);\n"]},"metadata":{},"sourceType":"module"}