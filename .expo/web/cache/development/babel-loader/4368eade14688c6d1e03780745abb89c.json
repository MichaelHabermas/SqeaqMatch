{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/LevelSelectScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from \"react-redux\";\nimport { setCurrentGame } from \"../../store/MandMActions\";\nimport MenuButton from \"../components/MenuButton\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport LevelSelectionContainer from \"../components/LevelSelectionContainer\";\nimport DeckSelectionContainer from \"../components/DeckSelectionContainer\";\nimport defaultStyles from \"../config/styles\";\nvar levelCardsTest = [{\n  level: 1,\n  unlocked: true,\n  completed: false,\n  isSelected: true\n}, {\n  level: 2,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 3,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 4,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 5,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 6,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 7,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 8,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 9,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 10,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 11,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 12,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 13,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 14,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 15,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 16,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 17,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 18,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 19,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  level: 20,\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}];\nvar deckCardsTest = [{\n  name: \"Numbers 1\",\n  unlocked: true,\n  completed: false,\n  isSelected: true\n}, {\n  name: \"Numbers 2\",\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  name: \"Numbers 3\",\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  name: \"Food 1\",\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  name: \"Animals 1\",\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  name: \"Prepositions\",\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}, {\n  name: \"Shapes & Colors\",\n  unlocked: true,\n  completed: false,\n  isSelected: false\n}];\n\nfunction LevelSelectScreen(_ref) {\n  var navigation = _ref.navigation,\n      gameState = _ref.gameState,\n      dispatch = _ref.dispatch;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      menuChoice = _useState2[0],\n      setMenuChoice = _useState2[1];\n\n  var _useState3 = useState(levelCardsTest),\n      _useState4 = _slicedToArray(_useState3, 2),\n      levelCards = _useState4[0],\n      setLevelCards = _useState4[1];\n\n  var _useState5 = useState(deckCardsTest),\n      _useState6 = _slicedToArray(_useState5, 2),\n      deckCards = _useState6[0],\n      setDeckCards = _useState6[1];\n\n  var _useState7 = useState({\n    currentLevel: gameState.gameSettings.currentLevel,\n    currentDeckName: gameState.gameSettings.currentDeckName\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      newGameSettings = _useState8[0],\n      setNewGameSettings = _useState8[1];\n\n  var handleGoBack = function handleGoBack() {\n    navigation.navigate(\"Start\");\n  };\n\n  var handleLevelSelection = function handleLevelSelection(level) {\n    setLevelCards(levelCards.map(function (card) {\n      if (card.level === level) {\n        return _objectSpread(_objectSpread({}, card), {}, {\n          isSelected: true\n        });\n      } else {\n        return _objectSpread(_objectSpread({}, card), {}, {\n          isSelected: false\n        });\n      }\n    }));\n    setNewGameSettings(_objectSpread(_objectSpread({}, newGameSettings), {}, {\n      currentLevel: level\n    }));\n  };\n\n  var handleDeckSelection = function handleDeckSelection(deckName) {\n    setDeckCards(deckCards.map(function (deck) {\n      if (deck.name === deckName) {\n        return _objectSpread(_objectSpread({}, deck), {}, {\n          isSelected: true\n        });\n      } else {\n        return _objectSpread(_objectSpread({}, deck), {}, {\n          isSelected: false\n        });\n      }\n    }));\n    setNewGameSettings(_objectSpread(_objectSpread({}, newGameSettings), {}, {\n      currentDeckName: deckName\n    }));\n  };\n\n  var handleSaveCurrentGameSettings = function handleSaveCurrentGameSettings() {\n    if (newGameSettings.currentDeckName) {\n      dispatch(setCurrentGame(newGameSettings));\n      navigation.navigate(\"GamePlay\");\n    }\n  };\n\n  return React.createElement(Screen, {\n    screen: true,\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 3\n    }\n  }, React.createElement(ScreenHeader, {\n    navLeft: handleGoBack,\n    navLeftIcon: require(\"../assets/buttons/back_icon_dark.png\"),\n    navRight: handleSaveCurrentGameSettings,\n    navRightIcon: require(\"../assets/buttons/forward_icon_dark.png\"),\n    title: \"Level Select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }\n  }), React.createElement(View, {\n    style: styles.selections,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }\n  }, React.createElement(MenuButton, {\n    chosen: menuChoice,\n    onPress: function onPress() {\n      return setMenuChoice(true);\n    },\n    style: styles.selectionItem,\n    title: \"Level\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }), React.createElement(MenuButton, {\n    chosen: !menuChoice,\n    onPress: function onPress() {\n      return setMenuChoice(false);\n    },\n    style: styles.selectionItem,\n    title: \"Deck\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  })), menuChoice && React.createElement(LevelSelectionContainer, {\n    levelCards: levelCards,\n    handleLevelSelection: handleLevelSelection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }), !menuChoice && React.createElement(DeckSelectionContainer, {\n    deckCards: deckCards,\n    handleDeckSelection: handleDeckSelection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  club: {\n    position: \"absolute\"\n  },\n  screen: {\n    overflow: \"visible\"\n  },\n  selections: {\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\"\n  },\n  selectionItem: {\n    color: defaultStyles.colors.white,\n    fontSize: 40\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    gameState: state.matchAndMemory\n  };\n};\n\nexport default connect(mapStateToProps)(LevelSelectScreen);","map":{"version":3,"sources":["/Users/Habermoose/Desktop/speaq_rn/speaq_match/app/screens/LevelSelectScreen.js"],"names":["React","useState","connect","setCurrentGame","MenuButton","Screen","ScreenHeader","LevelSelectionContainer","DeckSelectionContainer","defaultStyles","levelCardsTest","level","unlocked","completed","isSelected","deckCardsTest","name","LevelSelectScreen","navigation","gameState","dispatch","menuChoice","setMenuChoice","levelCards","setLevelCards","deckCards","setDeckCards","currentLevel","gameSettings","currentDeckName","newGameSettings","setNewGameSettings","handleGoBack","navigate","handleLevelSelection","map","card","handleDeckSelection","deckName","deck","handleSaveCurrentGameSettings","styles","screen","require","selections","selectionItem","StyleSheet","create","club","position","overflow","alignItems","flexDirection","justifyContent","color","colors","white","fontSize","mapStateToProps","state","matchAndMemory"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\n// redux\nimport { connect } from \"react-redux\";\nimport { setCurrentGame } from \"../../store/MandMActions\";\n\n// components\nimport MenuButton from \"../components/MenuButton\";\nimport Screen from \"../components/Screen\";\nimport ScreenHeader from \"../components/ScreenHeader\";\nimport LevelSelectionContainer from \"../components/LevelSelectionContainer\";\nimport DeckSelectionContainer from \"../components/DeckSelectionContainer\";\n\n// styles\nimport defaultStyles from \"../config/styles\";\n\n// const initialCurrentGameSettings = {\n// \tcurrentLevel: 1,\n// \tcurrentDeckName: null,\n// };\nconst levelCardsTest = [\n\t{ level: 1, unlocked: true, completed: false, isSelected: true },\n\t{ level: 2, unlocked: true, completed: false, isSelected: false },\n\t{ level: 3, unlocked: true, completed: false, isSelected: false },\n\t{ level: 4, unlocked: true, completed: false, isSelected: false },\n\t{ level: 5, unlocked: true, completed: false, isSelected: false },\n\t{ level: 6, unlocked: true, completed: false, isSelected: false },\n\t{ level: 7, unlocked: true, completed: false, isSelected: false },\n\t{ level: 8, unlocked: true, completed: false, isSelected: false },\n\t{ level: 9, unlocked: true, completed: false, isSelected: false },\n\t{ level: 10, unlocked: true, completed: false, isSelected: false },\n\t{ level: 11, unlocked: true, completed: false, isSelected: false },\n\t{ level: 12, unlocked: true, completed: false, isSelected: false },\n\t{ level: 13, unlocked: true, completed: false, isSelected: false },\n\t{ level: 14, unlocked: true, completed: false, isSelected: false },\n\t{ level: 15, unlocked: true, completed: false, isSelected: false },\n\t{ level: 16, unlocked: true, completed: false, isSelected: false },\n\t{ level: 17, unlocked: true, completed: false, isSelected: false },\n\t{ level: 18, unlocked: true, completed: false, isSelected: false },\n\t{ level: 19, unlocked: true, completed: false, isSelected: false },\n\t{ level: 20, unlocked: true, completed: false, isSelected: false },\n];\nconst deckCardsTest = [\n\t{ name: \"Numbers 1\", unlocked: true, completed: false, isSelected: true },\n\t{ name: \"Numbers 2\", unlocked: true, completed: false, isSelected: false },\n\t{ name: \"Numbers 3\", unlocked: true, completed: false, isSelected: false },\n\t{ name: \"Food 1\", unlocked: true, completed: false, isSelected: false },\n\t{ name: \"Animals 1\", unlocked: true, completed: false, isSelected: false },\n\t{\n\t\tname: \"Prepositions\",\n\t\tunlocked: true,\n\t\tcompleted: false,\n\t\tisSelected: false,\n\t},\n\t{\n\t\tname: \"Shapes & Colors\",\n\t\tunlocked: true,\n\t\tcompleted: false,\n\t\tisSelected: false,\n\t},\n];\n\nfunction LevelSelectScreen({ navigation, gameState, dispatch }) {\n\tconst [menuChoice, setMenuChoice] = useState(true);\n\tconst [levelCards, setLevelCards] = useState(levelCardsTest);\n\tconst [deckCards, setDeckCards] = useState(deckCardsTest);\n\tconst [newGameSettings, setNewGameSettings] = useState({\n\t\tcurrentLevel: gameState.gameSettings.currentLevel,\n\t\tcurrentDeckName: gameState.gameSettings.currentDeckName,\n\t});\n\n\tconst handleGoBack = () => {\n\t\tnavigation.navigate(\"Start\");\n\t};\n\n\tconst handleLevelSelection = level => {\n\t\tsetLevelCards(\n\t\t\tlevelCards.map(card => {\n\t\t\t\tif (card.level === level) {\n\t\t\t\t\treturn { ...card, isSelected: true };\n\t\t\t\t} else {\n\t\t\t\t\treturn { ...card, isSelected: false };\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tsetNewGameSettings({ ...newGameSettings, currentLevel: level });\n\t};\n\n\tconst handleDeckSelection = deckName => {\n\t\tsetDeckCards(\n\t\t\tdeckCards.map(deck => {\n\t\t\t\tif (deck.name === deckName) {\n\t\t\t\t\treturn { ...deck, isSelected: true };\n\t\t\t\t} else {\n\t\t\t\t\treturn { ...deck, isSelected: false };\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tsetNewGameSettings({ ...newGameSettings, currentDeckName: deckName });\n\t};\n\n\tconst handleSaveCurrentGameSettings = () => {\n\t\tif (newGameSettings.currentDeckName) {\n\t\t\tdispatch(setCurrentGame(newGameSettings));\n\t\t\tnavigation.navigate(\"GamePlay\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<Screen screen={true} style={styles.screen}>\n\t\t\t<ScreenHeader\n\t\t\t\tnavLeft={handleGoBack}\n\t\t\t\tnavLeftIcon={require(\"../assets/buttons/back_icon_dark.png\")}\n\t\t\t\tnavRight={handleSaveCurrentGameSettings}\n\t\t\t\tnavRightIcon={require(\"../assets/buttons/forward_icon_dark.png\")}\n\t\t\t\ttitle=\"Level Select\"\n\t\t\t/>\n\t\t\t<View style={styles.selections}>\n\t\t\t\t<MenuButton\n\t\t\t\t\tchosen={menuChoice}\n\t\t\t\t\tonPress={() => setMenuChoice(true)}\n\t\t\t\t\tstyle={styles.selectionItem}\n\t\t\t\t\ttitle=\"Level\"\n\t\t\t\t/>\n\t\t\t\t<MenuButton\n\t\t\t\t\tchosen={!menuChoice}\n\t\t\t\t\tonPress={() => setMenuChoice(false)}\n\t\t\t\t\tstyle={styles.selectionItem}\n\t\t\t\t\ttitle=\"Deck\"\n\t\t\t\t/>\n\t\t\t</View>\n\t\t\t{menuChoice && (\n\t\t\t\t<LevelSelectionContainer\n\t\t\t\t\tlevelCards={levelCards}\n\t\t\t\t\thandleLevelSelection={handleLevelSelection}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{!menuChoice && (\n\t\t\t\t<DeckSelectionContainer\n\t\t\t\t\tdeckCards={deckCards}\n\t\t\t\t\thandleDeckSelection={handleDeckSelection}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</Screen>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tclub: {\n\t\tposition: \"absolute\",\n\t},\n\tscreen: { overflow: \"visible\" },\n\tselections: {\n\t\talignItems: \"center\",\n\t\tflexDirection: \"row\",\n\t\tjustifyContent: \"space-evenly\",\n\t},\n\tselectionItem: {\n\t\tcolor: defaultStyles.colors.white,\n\t\tfontSize: 40,\n\t},\n});\n\nconst mapStateToProps = state => ({\n\tgameState: state.matchAndMemory,\n});\n\nexport default connect(mapStateToProps)(LevelSelectScreen);\n"]},"metadata":{},"sourceType":"module"}